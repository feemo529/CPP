#include "manager.h"

Manager::Manager() {

}

Manager::Manager(string name, string pwd) {
	this->m_Name = name;
	this->m_Pwd = pwd;

	//初始化容器
	this->initVector();

	//获取机房信息
	ifstream ifs;

	ifs.open(COMPUTER_FLIE, ios::in);

	ComputerRoom c;
	while (ifs >> c.m_ComId && ifs >> c.m_MaxNum) {
		vCom.push_back(c);
	}
	cout << "当前机房数量为: " << vCom.size() << endl;

	ifs.close();
}

//菜单页面
void Manager::operMenu() {
	cout << "欢迎管理员: " << this->m_Name << "登录！" << endl;
	cout << "\t\t --------------------------------- \n";
	cout << "\t\t|\t\t\t\t  |\n";
	cout << "\t\t|\t    1.添加账号\t\t  |\n";
	cout << "\t\t|\t\t\t\t  |\n";
	cout << "\t\t|\t    2.查看账号\t\t  |\n";
	cout << "\t\t|\t\t\t\t  |\n";
	cout << "\t\t|\t    3.查看机房\t\t  |\n";
	cout << "\t\t|\t\t\t\t  |\n";
	cout << "\t\t|\t    4.清空预约\t\t  |\n";
	cout << "\t\t|\t\t\t\t  |\n";
	cout << "\t\t|\t    0.注销登录\t\t  |\n";
	cout << "\t\t|\t\t\t\t  |\n";
	cout << "\t\t --------------------------------- \n";
	cout << "请输入您得操作: ";
}

//添加账号
void Manager::addPerson() {
	cout << "请输入添加账号的类型" << endl;
	cout << "1、添加学生" << endl;
	cout << "2、添加老师" << endl;

	string fileName;
	string tip;
	string errorTip;
	ofstream ofs;

	int select = 0;
	cin >> select;

	if (select == 1) {
		fileName = STUDENT_FILE;
		tip = "请输入学号: ";
		errorTip = "学号重复,请重新输入: ";
	}
	else {
		fileName = TEACHER_FILE;
		tip = "请输入职工号: ";
		errorTip = "职工号重复,请重新输入: ";
	}

	ofs.open(fileName, ios::out | ios::app);
	int id = 0;
	string name;
	string pwd;

	cout << tip << endl;
	//检测重复学号
	while (true)
	{
		cin >> id;

		if (checkRepeat(id, select)) {

			cout << errorTip << endl;
		}
		else {
			break;
		}
	}
	cout << "请输入姓名: " << endl;
	cin >> name;
	cout << "请输入密码: " << endl;
	cin >> pwd;

	//向文件中写入数据
	ofs << id << " " << name << " " << pwd << " " << endl;
	cout << "添加成功" << endl;

	system("pause");
	system("cls");

	ofs.close();

	this->initVector();//调用初始化接口，从新获取文件中的数据
}

void printStudent(Student& s) {
	cout << "学号: " << s.m_Id << " 姓名: " << s.m_Name << " 密码: " << s.m_Pwd << endl;
}

void printTeacher(Teacher& t) {
	cout << "职工号: " << t.m_empId << " 姓名: " << t.m_Name << " 密码: " << t.m_Pwd << endl;
}

//查看账号
void Manager::showPerson() {
	cout << "请选择查看内容: " << endl;
	cout << "1、查看所有学生" << endl;
	cout << "2、查看所有老师" << endl;

	int select = 0;

	cin >> select;

	if (select == 1) {
		cout << "所有学生信息如下: " << endl;
		for_each(vStu.begin(), vStu.end(), printStudent);
	}
	else {
		cout << "所有老师信息如下: " << endl;
		for_each(vTea.begin(), vTea.end(), printTeacher);
	}

	system("pause");
	system("cls");
}

//查看机房信息
void Manager::showComputer() {
	cout << "机房信息如下: " << endl;
	for (int i = 0; i < vCom.size(); i++)
	{
		cout << "机房编号: " << vCom[i].m_ComId << " 机房最大容量:" << vCom[i].m_MaxNum << endl;
	}
	system("pause");
	system("cls");
}

//清空所有预约记录
void Manager::clearFile() {
	ofstream ofs;
	ofs.open(ORDER_FILE, ios::trunc);

	cout << "清空成功!" << endl;
	system("pause");
	system("cls");
}

//初始化容器
void Manager::initVector() {
	vStu.clear();
	vTea.clear();

	//读取学生文件信息
	ifstream ifs;
	ifs.open(STUDENT_FILE, ios::in);
	if (!ifs.is_open()) {
		cout << "文件读取失败" << endl;
		return;
	}

	Student s;
	while (ifs >> s.m_Id && ifs >> s.m_Name && ifs >> s.m_Pwd) {
		vStu.push_back(s);
	}
	cout << "当前学生数量为: " << vStu.size() << endl;
	ifs.close();

	//读取教师信息
	ifs.open(TEACHER_FILE, ios::in);

	Teacher t;
	while (ifs >> t.m_empId && ifs >> t.m_Name && ifs >> t.m_Pwd) {
		vTea.push_back(t);
	}
	cout << "当前教师数量为: " << vTea.size() << endl;

	ifs.close();
}

//检测重复学号
bool Manager::checkRepeat(int id, int type) {
	if (type == 1) {
		for (int i = 0; i < vStu.size(); i++)
		{
			if (id == vStu[i].m_Id) {
				return true;
			}
		}
	}
	else {
		for (int i = 0; i < vTea.size(); i++)
		{
			if (id == vTea[i].m_empId) {
				return true;
			}
		}
	}
	return false;
}